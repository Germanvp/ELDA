int[50] x;
int[50] y;

int[50] reg_x;
int[50] reg_y;

int[50][2] xy;

void display_data(int v) {
	if (v == 1) {
		out("Data for x");
		out("Min of x: " + min(x));
		out("Max of x: " + max(x));
		out("Mean of x: " + mean(x));
		out("Median of x: " + median(x));
		out("Std deviation of x: " + std(x));
		out("Variance of x: " + var(x));
	} else {
		out("Data for y");
		out("Min of y: " + min(y));
		out("Max of y: " + max(y));
		out("Mean of y: " + mean(y));
		out("Median of y: " + median(y));
		out("Std deviation of y: " + std(y));
		out("Variance of y: " + var(y));
	}
}

void compute_linear_regression() {
	float[2] reg_params = linear_regression(x, y);
	int val_x = 2;
	string res = "Linear function: " + reg_params[0];
	res = res + "x + " + reg_params[1];

	out(res);
	for i with range(0, 50) {
		reg_x[i] = val_x;
		reg_y[i] = reg_params[0] * val_x + reg_params[1];
		val_x = val_x + 2;
	}
	graph(reg_x, reg_y, "plot");
}

void compute_logistic_regression() {
	float[2] reg_params = logistic_regression(x, y);

	out("Logistic Regression parameters: ");
	out(reg_params[0]);
	out(reg_params[1]);
}

void populate_xy() {
	for i with range(0, size(x)) {
		xy[i][0] = x[i];
		xy[i][1] = y[i];
	}
}

void compute_kmeans() {
	float[2][2] centers = k_means(2, xy);
	float[2] val_x;
	float[2] val_y;

	val_x[0] = centers[0][0];
	val_y[0] = centers[0][1];
	val_x[1] = centers[1][0];
	val_y[1] = centers[1][1];

	out("First center at: ");
	out("X: " + val_x[0]);
	out("Y: " + val_y[0]);

	out("Second center at: ");
	out("X: " + val_x[1]);
	out("Y: " + val_y[1]);

	graph(val_x, val_y, "scatter");
}

void main() {
    open_file("Testing/ELDA Tests/X.csv", x);
    open_file("Testing/ELDA Tests/Y.csv", y);

	display_data(1);
	out("----------------------");
	display_data(2);

	graph(x, y, "scatter");

	compute_linear_regression();
	compute_logistic_regression();

	populate_xy();
	compute_kmeans();
}